#+startup: overview
#+title: Emacs Config File
#+author: KSH
#+email: skye@harith.xyz
#+options: toc:t todo:nil

* User Information
This contains basic user information regarding the user such as email id and name. It is used throughout emacs in places such as Org mode preambles and Mu4e.

These variables are defined in the core C code of emacs.

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t -*-
  (setq user-full-name "Kaushik Srinivasan Harith")
  (setq user-mail-address "kaushik@archeanchemicals.com")
#+end_src

* Tweaks to emacs' functioning
There are some basic tweaks to make to emacs' default behaviour that make it more intuitive for use.
** COMMENT PATH variable
Sometimes certain packages in emacs make calls to executeables from the system. This means we occasionally need to add to this path variable here to let emacs be aware of those commands.

#+begin_src emacs-lisp
#+end_src

** Better autosaving
Auto-saving for default emacs puts the auto saved files in the current working directory. It makes more sense to prevent cluttering in organized folders by dumping these autosave files in a dedicated place.

Other changes include backups via file copying, giving priority to newer versions for backup storage, and automatic deleting of out-dated versions without prompting. Files are noteably version controled.

These variables are defined in =files.el=.

#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/saves/"))
        backup-by-copying t
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)

  (setq auto-save-file-name-transforms
        `((".*" "~/.emacs.d/saves/" t)))
#+end_src

** Window Management
This is a fix to make emacs windows place more consistently in the frame nicked from Protesilaous Stavrous. Basically, you use Regex to identify the type of buffer that spawns and place it accordingly in a special kind of window called a =side-window=. You can control the height and width of the side-window as a ratio of the whole screen. Note that when the side-window is the only window on the screen, you can't kill the frame.

This behaviour is controlled by =window.el=.
#+begin_src emacs-lisp
  (use-package window
    :ensure nil
    :init
    (setq display-buffer-alist
          '(;; top window
            ("\\*Messages.*"
             (display-buffer-in-side-window)
             (window-height . 0.25)
             (side . top)
             (slot . 1))
            ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\)\\*"
             (display-buffer-in-side-window)
             (window-height . 0.25)
             (side . top)
             (slot . 2))
            ;; bottom window
            ("^\\(\\*e?shell\\|vterm\\).*" ;; You don't use eshell. get rid of it
             (display-buffer-in-side-window)
             (window-width . 0.40)
             (side . bottom)
             (slot . 1))
            ;; left side window
            ("\\*Help.*"
             (display-buffer-in-side-window)
             (window-width . 0.35)       ; See the :hook
             (side . left)
             (slot . 0))
            ;; right window
            ("\\*Faces\\*"
             (display-buffer-in-side-window)
             (window-width . 0.35)
             (side . right)
             (slot . 0)
             (window-parameters . ((mode-line-format . (" " mode-line-buffer-identification)))))
            ("\\*Custom.*"
             (display-buffer-in-side-window)
             (window-width . 0.35)
             (side . right)
             (slot . 1))
            ))

    (setq window-combination-resize t)
    (setq even-window-sizes 'height-only)
    (setq window-sides-vertical nil)

    :hook ((help-mode . visual-line-mode)
           (custom-mode . visual-line-mode))
           )
#+end_src

** COMMENT Vertical splits as defualt
Modern monitors are wider than they are tall. Latin text also flows from top to bottom. It makes sense then to naturally divide a frame across the width of the screen instead of across the length.

This makes sense to me since i primarily use emacs full-screen. If you use a tiling wm or prefer narrower frames (say if you were using the =nano-emacs= configuration ), then go ahead and comment these out.

These variables are defined in =window.el=.

#+begin_src emacs-lisp
  (setq split-height-threshold nil)
  (setq split-width-threshold 0)
#+end_src

** Custom-set variables
When you customize a variable in emacs using the =M-x customize-variable= interface, it dumps all the customizations in the init.el file. This is not that big a deal, but to improve readability of these files, we can add a dedicated file for this.

This behaviour is defined in =cus-edit.el=.

#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))

  (load-file custom-file)
#+end_src

** Editing changes
The following are some optional changes I make to emacs' editing experience.

*** COMMENT Cua Mode
I have grown accustomed to the church of emacs way of doing things. However, if one prefers, they can do things the 'normal' way by enabling =cua-mode= by uncommenting out this section.

This behaviour is defined in =cua-base.el=.

#+begin_src emacs-lisp
  (cua-mode t)
#+end_src

*** Replace selected text with typed text
By default, when you select a region in emacs and start typing, it doesn't replace the text as would be expected when migrating from more CUA standard apps like word. This changes that behavior

This behaviour is defined in =delsel.el=.

#+begin_src emacs-lisp
  (delete-selection-mode 1)
#+end_src

*** Visual Line Mode
By default emacs will let a line go off screen to infinity unless a =<return>= key is pressed to mark the end of the line. This behaviour made sense back in the days of type writers and carraige returns but makes no sense in the modern monitor based world.

The function is defined in =simple.el=.
#+begin_src emacs-lisp
    (global-visual-line-mode t)
#+end_src

** Custom functions
In the course of using emacs, I have found it useful to collect and define certain functions for simple tasks. Functions obtained from the community bear the prefix =contrib/=, while my own bear the prefix =skye/=. This list was a *lot longer* but I have decided to trim it down to the essentials.

*** Minibuffer quitting
Quitting out of the minibuffer can be a bit finicky. This function forces focus to the minibuffer when it is "active", thus making =C-g= quitting more reliable.

#+begin_src emacs-lisp
  (defun contrib/keyboard-quit-context+ ()
    "Quit current context.

  This function is a combination of `keyboard-quit' and
  `keyboard-escape-quit' with some parts omitted and some custom
  behavior added."
    (interactive)
    (cond ((region-active-p)
           ;; Avoid adding the region to the window selection.
           (setq saved-region-selection nil)
           (let (select-active-regions)
             (deactivate-mark)))
          ((eq last-command 'mode-exited) nil)
          (current-prefix-arg
           nil)
          (defining-kbd-macro
           (message
            (substitute-command-keys
             "Quit is ignored during macro defintion, use \\[kmacro-end-macro] if you want to stop macro definition"))
           (cancel-kbd-macro-events))
          ((active-minibuffer-window)
           (when (get-buffer-window "*Completions*")
             ;; hide completions first so point stays in active window when
             ;; outside the minibuffer
             (minibuffer-hide-completions))
           (abort-recursive-edit))
          (t
           (when completion-in-region-mode
             (completion-in-region-mode -1))
           (let ((debug-on-quit nil))
             (signal 'quit nil)))))
#+end_src

*** Quit Window
Useful for things like dired etc that don't kill the window on quitting.

#+begin_src emacs-lisp
  (defun skye/quit-window ()
    "If more than one window is open, close window on quit"
    (interactive)
    (if (> (length (window-list)) 1) (delete-window) (quit-window)))
#+end_src

*** Org PDF convenience tools
These are a bunch of nifty functions to reload and recompile latex files and pdf files fully from within emacs.

#+begin_src emacs-lisp
  (defun contrib/update-other-buffer ()
    (interactive)
    (other-window 1)
    (revert-buffer nil t)
    (other-window -1))

  (defun contrib/latex-compile-and-update-other-buffer ()
    "Has as a premise that it's run from a latex-mode buffer and the
     other buffer already has the PDF open"
    (interactive)
    (save-buffer)
    (shell-command (concat "pdflatex " (buffer-file-name)))
    (switch-to-buffer (other-buffer))
    (kill-buffer)
    (contrib/update-other-buffer))

  (defun contrib/org-compile-beamer-and-update-other-buffer ()
    "Has as a premise that it's run from an org-mode buffer and the
     other buffer already has the PDF open"
    (interactive)
    (org-beamer-export-to-pdf)
    (contrib/update-other-buffer))

  (defun contrib/org-compile-latex-and-update-other-buffer ()
    "Has as a premise that it's run from an org-mode buffer and the
     other buffer already has the PDF open"
    (interactive)
    (org-latex-export-to-pdf)
    (contrib/update-other-buffer))

  (eval-after-load 'latex-mode
    '(define-key latex-mode-map (kbd "C-c r") 'contrib/latex-compile-and-update-other-buffer))

  (define-key org-mode-map (kbd "C-c lr") 'contrib/org-compile-latex-and-update-other-buffer)
  (define-key org-mode-map (kbd "C-c br") 'contrib/org-compile-beamer-and-update-other-buffer)
#+end_src

** Custom Keybinds
This is a list of custom keybinds that I couldn't fit in with the package declarations. Use =C-z= for all my custom keybinds and use =M-z= for functions that are related but broader/inverse in scope.

#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :bind
    (:map global-map
          :prefix-map ctrl-z-prefix-map
          :prefix "C-z"
          ("C-<SPC>" . fixup-whitespace)
          ("C-e" . eval-defun)
          (";" . comment-dwim)
          ("C-h f" . describe-face))

    (:map global-map
          ("<f5>" . revert-buffer)
          ([remap kill-buffer] . skye/kill-current-buffer)
          )
    ) 
#+end_src

* Package.el and Use-package setup
The following lines of code initialize the file =package.el=, then add to a list - variable provided by =package.el= called =package-archives= which lets it know which archives (lists of repositories of packages) to use.

By default, GNU ELPA (standing for Emacs Lisp Package Archive) and Non-GNU ELPA are the values in the list.

Once that is done, we install a handy package called =vc-use-package= that works in conjunction with =use-package= (now built into emacs) to handle installing packages from other sources such as github, gitlab etc. The use-package macro is used extensively in this configuration to improve the readability to the user and to reduce unnecesary complexity.

We lastly tell =use-package= to install a package if it is not available with the variable =use-package-always-ensure=.

Use-package is defined in =use-package-core.el=.

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  (unless (package-installed-p 'vc-use-package)
    (package-vc-install "https://github.com/slotThe/vc-use-package"))

  (setq use-package-always-ensure t)
#+end_src

* Tweaks to emacs' appearance
The complete look and feel of emacs is being dictated by nano emacs. It is objectively the best looking emacs distribution. I Just modify the colors set by =nano-base-colors.el= to match my own emacs theme, TransSide

#+begin_src emacs-lisp
  (defun skye/nano-dark-theme ()
    "Modifying the nano theme with my own colors (dark)"
    (setq nano-color-background "#00000F"
          nano-color-critical "#FF0069"
          nano-color-faded "#BE9DDF"
          nano-color-foreground "#FFEEFF"
          nano-color-highlight "#AEC6FF"
          nano-color-popout "#FEA5D8"
          nano-color-salient "#92DDFA"
          nano-color-strong "#EFDFEF"
          nano-color-subtle "#6E58BB"
          nano-theme-var "dark")
    (nano-refresh-theme)
  )

  (defun skye/nano-light-theme ()
    "Modifying the nano theme with my own colors (light)"
    (setq nano-color-background "#F1EBFF"
          nano-color-critical "#FF0069"
          nano-color-faded "#504099"
          nano-color-foreground "#1F001F"
          nano-color-highlight "#EFCFEF"
          nano-color-popout "#800037"
          nano-color-salient "#0068AD"
          nano-color-strong "#000000"
          nano-color-subtle "#816ECF"
          nano-theme-var "light")
    (nano-refresh-theme)
  )

  (defun skye/nano-catppuccin-mocha ()
    "Modifying the nano theme with my own colors (dark)"
    (setq nano-color-background "#1E1E2E"
          nano-color-critical "#F38BA8"
          nano-color-faded "#BAC2DE"
          nano-color-foreground "#EDF6FF"
          nano-color-highlight "#89DCFB"
          nano-color-popout "#8F71E7"
          nano-color-salient "#54CFFF"
          nano-color-strong "#EDF6FF"
          nano-color-subtle "#313244"
          nano-theme-var "dark")
    (nano-refresh-theme)
    )

  (use-package nano
    :vc (:fetcher github :repo rougier/nano-emacs)
    :config
    (nano-theme-set-dark)
    (skye/nano-catppuccin-mocha)
    )

  (set-face-attribute 'default nil :weight 'regular)
#+end_src

* Packages
** Packages that make navigating emacs easier
*** All the icons 
All-the-icons provides fancy icons for all the lists and menus in emacs. This code uses the 6.0 beta which bundles the svgs instead of downloading the fonts.

#+begin_src emacs-lisp
  (use-package all-the-icons
    :vc (all-the-icons :url "https://github.com/domtronn/all-the-icons.el.git" :branch "svg")
    :if (display-graphic-p))

  (use-package all-the-icons-completion)

  (use-package all-the-icons-dired)
#+end_src

*** cdLaTeX
=cdlatex= is a useful package when typesetting math in LaTeX. Pressing the ~ key activates an overlay for you to choose from the most common math and logic symbols.

#+begin_src emacs-lisp
  (use-package cdlatex)
#+end_src

*** Better minibuffer
A lot happens in the emacs minibuffer. Text search (default by =isearch, ido=), which inturn requires text completion (default by =icomplete=), the help selection for functions, variables etc, and a lot more.

The following group of packages =vertico, marginalia, consult, orderless= are made by one Minad on github. They are very close to vanilla emacs but provide a richer experience with a focus on a small codebase.

#+begin_src emacs-lisp
  (use-package vertico
    :bind
    (:map vertico-map
          ([remap keyboard-quit] . contrib/keyboard-quit-context+))
    :custom
    (vertico-count 8)
    (vertico-resize t)
    (vertico-cycle nil)
    :init
    (vertico-mode)
    )

  (use-package marginalia
    :custom
    (marginalia-max-relative-age 0)
    (marginalia-align 'right)
    :init
    (marginalia-mode)
    :hook
    (marginalia-mode . all-the-icons-completion-marginalia-setup))

  (all-the-icons-completion-mode)
  
  (use-package consult
    :bind
    (:map global-map
          ("C-s" . consult-line)
          ("C-x b" . consult-buffer)
          ))

  (use-package orderless
    :custom
    (completion-styles '(orderless))  
    (completion-category-defaults nil)
    (orderless-matching-styles
     '(orderless-literal
       orderless-prefixes
       orderless-initialism
       orderless-regexp
       )))

  (use-package savehist
    :config (savehist-mode))
#+end_src

*** Corfu
=Corfu= is another package by Minad for auto-complete suggestions.

#+begin_src emacs-lisp
  (use-package corfu
    :config
    (setq corfu-auto t)
    (setq corfu-auto-delay 0)
    (setq corfu-auto-prefix 0)
    (setq corfu-quit-no-match t)
    :init
    (global-corfu-mode))
#+end_src

*** Dired
Dired or Dir-ed is the built in directory editor for emacs. Since it treats every thing as a text buffer, there are some powerful things we can do with it.

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :config
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq delete-by-moving-to-trash t)
    (when (eq system-type 'darwin)
      (setq insert-directory-program "/opt/homebrew/bin/gls"))
    (setq dired-listing-switches "-al --group-directories-first --time-style=iso")
    (setq dired-dwim-target t)
    :hook
    ((dired-mode . dired-hide-details-mode)
     (dired-mode . all-the-icons-dired-mode))
    :bind
    (:map dired-mode-map ("q" . skye/quit-window)))
#+end_src

*** Electric pair mode
Common things that come in pairs are forced to exist in pairs. Part of vanilla emacs. Small change made in org mode to ignore <> completion.

#+begin_src emacs-lisp
  (use-package elec-pair
    :hook
    (org-mode . (lambda ()
                  (setq-local electric-pair-inhibit-predicate
                              `(lambda (c)
                                 (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

    (org-mode . (lambda ()
                  (setq-local electric-pair-pairs (append electric-pair-pairs '((?$ . ?$))))))
    :config
    (electric-pair-mode 1))
#+end_src

*** Expand-region
This changes the default =mark-position= behaviour. Now, pressing ctrl-= after setting a mark will intelligently expand the highlighted region. The tech behind this is fascinating as it understands semantic scope to a certain extent.

#+begin_src emacs-lisp
  (use-package expand-region
    :after (org)
    :bind
    (:map global-map
          ("C-=" . er/expand-region)))
#+end_src

*** Magit
=magit= is your one stop shop for using git, all from within emacs!

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

*** PDF-tools
=pdf-tools= replaces the built in =doc-view-mode= in emacs to provide a superior pdf viewing experience.

#+begin_src emacs-lisp
  (use-package pdf-tools
    :hook
    (doc-view-mode . pdf-view-mode)
    (pdf-view-mode . pdf-view-themed-minor-mode))
#+end_src
*** Rainbow delimiters
Delimiters is a fancy word/way of saying brackets, parenthesis, curly brackets etc. These let one disambiguate nested delimiters quickly and easily.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode)
    (Latex-mode . rainbow-delimiters-mode)
    :config
    (rainbow-delimiters-mode 1))
#+end_src

*** Rainbow mode
Turns any hex color code that appears in a file into the actual color it represents.

#+begin_src emacs-lisp
  (use-package rainbow-mode)
#+end_src

*** Restart emacs
Self-explanatory
    
#+begin_src emacs-lisp
  (use-package restart-emacs
    :config
    (setq restart-emacs-restore-frames nil))
#+end_src

*** Undo tree
This replaces the default undo behaviour in emacs and gives you a nice tree timeline to navigate. Standard emacs commands still work , but now an additional mode with a history tree given by =ctrl-x u= is provided. =q= to quit and choose.

#+begin_src emacs-lisp
  (use-package undo-tree
    :init
    (global-undo-tree-mode)
    :config
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo"))))
#+end_src 

*** Which-Key
Provides completion for keybinds in the minibuffer. Useful when learning emacs and as a replacement for the menu bar.

#+begin_src emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+end_src

** Packages that make me want to use emacs
These are the packages that drive my day to day use of emacs.
*** Org mode stuff
**** Org mode
To explain org mode in a one liner would be a crime. The following are the obvious benefits

1) Plain text files with mark-down like syntax
2) Unparalleled list and heirarchy management
3) Todo management and agenda view
4) Numerous export options to other formats notable LaTeX, Beamer, and HTML
5) Code tangling for literate programing (like this file!)

More subtle benefits like the deep integration with multiple packages and emacs itself (like =org-capture=) will require some time to appreciate it. Suffice it to say, emacs and org-mode are intertwined not just in function but also in popularity.

Note that you will probably want to set your own Agenda file locations, Org Directory, Todo states etc. For help with the syntax, I always read the help pages right in emacs which can be accessed with =C-h f= for functions and =C-h v= for variables. You can also place the cursor (called the point in emacs lingo) over a variable and invoke those keybinds to directly go to the help pages for those functions.

#+begin_src emacs-lisp
  (use-package org
    :hook
    (org-mode . org-cdlatex-mode)
    (org-mode . org-indent-mode)

    :init
    (setq org-highlight-latex-and-related '(native latex script))
    (setq org-export-backends '(latex odt org))

    :bind
    (:map org-mode-map
          ("C-c C-x C-e" . skye/org-mark-and-archive)
          ("C-c C-x <up>" . org-cycle-list-bullet)
          ("M-<return>" . org-insert-item)
          :map global-map
          ("C-c a" . org-agenda)
          ("C-c c" . org-capture))

    :config
    (require 'org-tempo)

    (setq org-directory "~/Documents/Org")

    (defun skye/org-get-path (stringname)
      "Use concat to generate full path."
      (concat (file-name-as-directory org-directory) stringname))

    (setq skye/Readme (skye/org-get-path "Task List.org"))
    (setq skye/archive (skye/org-get-path "archive.org"))

    (setq org-agenda-files (list skye/Readme))
    (setq org-archive-location (concat skye/archive "::* From %s"))

    (setq org-ellipsis " ▼")
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)

    (setq org-todo-keywords '((sequence "TODO(t!)" "|" "DOING(i!)" "|" "WAITING(w!)") (sequence "|" "CANCELLED(c)" "|" "DONE(d)")))

    (setq org-enforce-todo-dependencies t)
    (setq org-enforce-todo-checkbox-dependencies t)

    (setq skye/bullets-list '("◉" "●" "○" "⊙"))

    (setq org-src-window-setup 'current-window)

    (defun skye/org-mark-and-archive ()
      "Mark the state of the current subtree as either DONE or CANCELLED and export to my archive.org file"
      (interactive)
      (org-todo (completing-read "Choose a final TODO state" '("DONE" "CANCELLED")))
      (org-archive-subtree))


    (setq org-pretty-entities nil)
    (setq org-preview-latex-default-process 'dvisvgm)

    (setq org-fontify-todo-headline nil)
    (setq org-fontify-done-headline nil)

    (setq org-tags-column 70)

    (defun skye/return-user-details (a)
    "Template function for giving tempo-user-elements the details it needs"
    (cl-case (identity a)
      (u user-full-name)
      (e user-mail-address)))

    (setq tempo-user-elements '(skye/return-user-details))

    (tempo-define-template "default-org-header"
                           '("#+latex_class: article"n"#+latex_class_options: [a4paper, 10pt]"n"#+latex_header: \\usepackage[margin=1in]{geometry} \\usepackage{setspace}"n"#+latex_header_extra: \\doublespace"n"#+latex_compiler: pdflatex"n"#+options: author:t broken-links:nil c:nil creator:nil"n"#+options: date:t e:nil email:nil num:t"n"#+options: timestamp:nil title:t toc:nil todo:nil |:t"n"#+title:"p n"#+date: \\today"n"#+author: "u n"#+email: "e) "<P")

    )
#+end_src

**** Org-modern
=org-modern= is yet another Minad package that makes org-mode more palatable to the modern eye.

#+begin_src emacs-lisp
  (use-package org-modern
    :config
    (global-org-modern-mode))
#+end_src

*** COMMENT Emacs Application Framework
#+begin_src emacs-lisp
  (use-package eaf
    :vc (eaf :fetcher "git" :host "github" :repo "emacs-eaf/emacs-application-framework")
    :config
    (eaf-install-and-update))

  (require 'eaf-browser)
  (require 'eaf-image-viewer)
  (require 'eaf-rss-reader)
  (require 'eaf-file-manager)
  (require 'eaf-pyqterminal)
#+end_src

*** TeX
#+begin_src emacs-lisp
  (use-package latex
    :ensure auctex)
#+end_src

*** Julia
#+begin_src emacs-lisp
  (use-package julia-mode
    :hook
    (julia-mode . julia-math-mode))
#+end_src

* Lastly
These are small tweaks to silence certain warnings that come up when using certain functions in certain modes. Emacs will warn the user that these are confusing to first time users and enable them only at will. This prevents those annoying pop-ups

Also, maximum fontification of faces is prettier to me. Needs to be loaded at the end to bypass nano being dumb.

#+begin_src emacs-lisp
  (put 'scroll-left 'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)
  (put 'narrow-to-region 'disabled nil)

  (setq font-lock-maximum-decoration t)
#+end_src  
