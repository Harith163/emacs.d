#+STARTUP: overview
#+TITLE: EMACS initialization file
#+AUTHOR: Kaushik Srinivasan Harith
#+EMAIL: kaushik.harith@gmail.com
#+OPTIONS: toc:t todo:nil

* Identity commands
These commands set a full name and user email adress to be referenced in places like org mode's author and mu4e.

#+begin_src emacs-lisp
  (setq user-full-name "Kaushik Srinivasan Harith")
  (setq user-mail-address "kaushik.harith@gmail.com")
#+end_src

* Packages
This is a list of packages that are installed and used. There are two types of packages/package configuration - ones that make emacs easier/more fun to live in and ones that make me want to use emacs. I need to trim some fat here...

** Packages that make navigating emacs easier
*** All the icons 
OOh fancy and pretty pictures for dired, M-x etc
**** all the icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :diminish "")
#+end_src

**** all the icons dired
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :ensure t
    :diminish "")
#+end_src

**** all the icons ibuffer
#+begin_src emacs-lisp
  (use-package all-the-icons-ibuffer
    :ensure t)
#+end_src

**** all the icons ivy
#+begin_src emacs-lisp
  (all-the-icons-ivy-setup)
  (all-the-icons-ivy-rich-mode 1)
#+end_src

*** Clever M-x listings
Prescient is a package that orders the things you use the most and guesses from what you're typing, the most prescient listings would be and serves it upto you.

**** Prescient    
#+begin_src emacs-lisp
  (use-package prescient
    :ensure
    :config
    (setq prescient-history-length 200)
    (setq prescient-save-file "~/.emacs.d/prescient-items")
    (setq prescient-filter-method '(literal regexp))
    (prescient-persist-mode 1))
#+end_src

**** Ivy-Prescient
Ivy + prescient. What do you want me to say, future me?

#+begin_src emacs-lisp
  (use-package ivy-prescient
    :ensure
    :after (prescient ivy)
    :config
    (setq ivy-prescient-sort-commands
          '(:not counsel-grep
                 counsel-rg
                 counsel-switch-buffer
                 ivy-switch-buffer
                 swiper
                 swiper-multi))
    (setq ivy-prescient-retain-classic-highlighting t)
    (setq ivy-prescient-enable-filtering nil)
    (setq ivy-prescient-enable-sorting t)
    (ivy-prescient-mode 1))
#+end_src

*** Company mode
This is what I use for auto-completion. Beware using it everywhere lest you get annoyed.

**** Company itself
The crux of it all. Currently only hooked to prog mode. NOT adding latex or org mode to that list.

#+begin_src emacs-lisp
  (use-package company
    :diminish ""
    :ensure t
    :init
    (setq company-require-match nil) ; Don't require match, so you can still move your cursor as expected.
    (setq company-tooltip-align-annotations t) ; Align annotation to the right side.
    (setq company-eclim-auto-save nil) ; Stop eclim auto save.
    (setq company-dabbrev-downcase nil) ; No downcase when completion.

    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 4)
    (add-hook 'prog-mode-hook 'company-mode)

    (defun jcs--company-complete-selection--advice-around (fn)
      "Advice execute around `company-complete-selection' command."
      (let ((company-dabbrev-downcase t)) (call-interactively fn))) (advice-add 'company-complete-selection :around #'jcs--company-complete-selection--advice-around))
#+end_src

**** Company fuzzy
Fuzzy match text so that you don't have to sit there and type shit out letter by letter to chance on the function you need.

#+begin_src emacs-lisp
  (use-package company-fuzzy
    :ensure t
    :after (company)
    :diminish ""
    :config
    (global-company-fuzzy-mode 1)
    (setq company-fuzzy-prefix-ontop t)
    (setq company-fuzzy-sorting-backend 'alphabetic)
    (setq company-fuzzy-show-annotation t))
#+end_src

**** Company AucTeX
Company auto complete for auctex. Is this contradicting my previous statement? Maybe? No?

#+begin_src emacs-lisp
  (use-package company-auctex
    :ensure t
    :init
    (company-auctex-init))
#+end_src

*** Counsel and swiper
Better search and completion in minibuffer.

#+begin_src emacs-lisp
  (use-package counsel
    :ensure t)

  (use-package swiper
    :ensure t)

  (use-package ivy
    :demand
    :diminish ""
    :ensure t
    :bind
    (:map global-map
          ("C-s" . swiper)
          ("C-r" . swiper-backward)
          ("C-c C-r" . ivy-resume)
          ("<f6>" . ivy-resume)
          ("M-x" . counsel-M-x)
          ("C-x C-f" . counsel-find-file)
          ("s-f" . counsel-find-file)	
          ("<f1> f" . counsel-describe-function)
          ("<f1> v" . counsel-describe-variable)
          ("<f1> l" . counsel-load-library)
          ("<f2> i" . counsel-info-lookup-symbol)
          ("<f2> u" . counsel-unicode-char)
          ("C-c g" . counsel-git)
          ("C-c j" . counsel-git-grep)
          ("C-c k" . counsel-ag)
          ("C-x l" . counsel-locate)
          ("M-y" . counsel-yank-pop))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq swiper-use-visual-line nil)
    (setq swiper-use-visual-line-p (lambda (a) nil)))
#+end_src

*** Diminish
Part of use-package but still declaring for educational purposes. Diminishes the length of the word used to describe the active minor modes.

#+begin_src emacs-lisp
  (use-package diminish
    :ensure t)
#+end_src

*** Dired
Dired is dired. I'm not smart enough to use it to its potential.

#+begin_src emacs-lisp
  (use-package dired
    :config
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq delete-by-moving-to-trash t)
    (setq dired-listing-switches "-al --group-directories-first --time-style=iso")
    (setq dired-dwim-target t)
    :hook
    ((dired-mode . dired-hide-details-mode)
     (dired-mode . all-the-icons-dired-mode))
    :bind
    (:map dired-mode-map ("q" . skye/quit-window)))
#+end_src

*** Electric pair mode
Common things that come in pairs are forced to exist in pairs. Part of vanilla emacs.

#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src

*** Expand-region
This changes the default mark position behaviour. Now, pressing ctrl-= after setting a mark will intelligently expand the highlighted region.

#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :after (org)
    :bind
    (:map global-map
          ("C-=" . er/expand-region)))
#+end_src

*** Ibuffer
Ibuffer is best buffer.

#+begin_src emacs-lisp
  (use-package ibuffer
    :ensure t

    :bind
    (("C-x C-b" . ibuffer)
     ("s-b" . ibuffer))

    :config
    (setq ibuffer-expert t)
    (setq ibuffer-saved-filter-groups
          '(("home"
             ("Magit" (or (mode . magit-process-mode)
                          (mode . magit-diff-mode)
                          (mode . magit-mode)
                          (mode . magit)
                          (mode . magit-blame-mode)
                          (mode . magit-blob-mode)
                          (mode . magit-cherry-mode)
                          (mode . magit-file-mode)
                          (mode . magit-wip-initial-backup-mode)
                          (mode . magit-log-mode)
                          (mode . magit-log-select-mode)
                          (mode . magit-submodule-list-mode)))
             ("Latex" (or (mode . latex-mode)
                          (mode . bibtex-mode)
                          (mode . latex-mode)))
             ("Org" (mode . org-mode))
             ("Help" (or (name . "\*Help\*")
                         (name . "\*Apropos\*")
                         (name . "\*info\*")
                         (mode . special-mode)
                         (mode . messages-buffer-mode)
                         (mode . fundamental-mode))))))

    (add-hook 'ibuffer-mode-hook
              '(lambda ()
                 (ibuffer-auto-mode 1)
                 (ibuffer-switch-to-saved-filter-groups "home")
                 (all-the-icons-ibuffer-mode 1)))

    )

#+end_src

*** Ivy rich
Fancier Ivy that provides loads more info.
#+begin_src emacs-lisp
  (ivy-rich-mode 1)
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
#+end_src

*** Lorem Ipsum
Lorem Ipsum dolor sit amet.
    
#+begin_src emacs-lisp
  (use-package lorem-ipsum
    :ensure t)
#+end_src

*** Magit
Use git from within emacs!! 
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src
    
*** Quickly jump around -
Using letters from the home row to quickly navigate to a point on the screen.

**** Ace-Window
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind
    ([remap other-window] . ace-window)
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    )
#+end_src

**** Avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    (:map global-map
          ("C-;" . avy-goto-char)
          ("C-'" . avy-goto-char-2)
          ("M-g l" . avy-goto-line)
          ("M-g r" . avy-resume)
          :map org-mode-map
          ("C-'" . avy-goto-char-2))
    )
#+end_src

*** Rainbow delimiters
Delimiters is a fancy word/way of saying brackets, parenthesis, curly brackets etc. My personal favourite mini package maybe second to rainbow mode.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook
    (prog-mode . rainbow-delimiters-mode)
    (Latex-mode . rainbow-delimiters-mode)
    :config
    (rainbow-delimiters-mode 1))
#+end_src

*** Rainbow mode
Turns any hex color code that appears in a file into the actual color it represents!!

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t)
#+end_src

*** Relative line numbers.
A simple package that shows the line number you're. If one wants absolute lines then *linum* is the way to go, but I hate math and only use line numbers for navigating, so *linum-relative* is the way to go.
    
#+begin_src emacs-lisp
  (use-package linum-relative
    :ensure t
    :init
    (global-linum-mode t)
    :config
    (linum-relative-mode)
    (add-hook 'doc-view-mode-hook 'contrib/inhibit-global-linum-mode))
#+end_src

*** Restart emacs from within emacs 
This is the quickest and the best thing ever for people who constantly change their mind/fuck things up (a.k.a me)
    
#+begin_src emacs-lisp
  (use-package restart-emacs
    :ensure t
    :config
    (setq restart-emacs-restore-frames t))
#+end_src
    
*** Try
Lets you try packages until you close emacs.
    
#+begin_src emacs-lisp
  (use-package try
    :ensure t)
#+end_src

*** Undo tree
This replaces the default undo behaviour in emacs and gives you a nice tree timeline to navigate. Standard ctrl-/ and ctrl-shift-/ with a tree given by ctrl-x u. q to quit and choose.

#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish ""
    :init
    (global-undo-tree-mode)
    :config
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo"))))
#+end_src 

*** Which-Key
Provides completion for keybinds in the minibuffer. Its great.

#+begin_src emacs-lisp
  (use-package which-key
    :diminish ""
    :ensure t
    :config (which-key-mode))
#+end_src

*** Yasnippets
Mainly used for smart physics snippets in org mode.

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1)

    (setq yas-snippet-dirs '("~/.emacs.d/snippets/")))

  (use-package yasnippet-snippets
    :ensure t)

#+end_src

** Packages that make me want to use emacs
*** Latex 
I get most of my writing done in latex. Exporting org mode to latex has been hit or miss for me. It works well for simple articles. But Auctex + CDlatex is the way to go.

**** Main latex stuff
#+begin_src emacs-lisp
  (use-package latex
    :defer t
    :ensure auctex
    :mode ("//.tex//" . latex-mode)
    :hook
    (LaTeX-mode . outline-minor-mode)
    :config
    (progn
      (setq TeX-fold-mode t)
      (setq TeX-parse-self t)
      (setq TeX-save-query nil)
      (setq TeX-PDF-mode t)
      (add-hook 'LaTeX-mode-hook 'cdlatex-mode)
      ))
#+end_src

**** Auctex things
Basically adding to $PATH. Why this didn't work when doing it through my zshrc, we'll never know.

#+begin_src emacs-lisp
  (setenv "PATH" (concat "/opt/texlive/2020/bin/x86_64-linux:"
                         (getenv "PATH")))
  (add-to-list 'exec-path "/opt/texlive/2020/bin/x86_64-linux")

  ;; (load "preview-latex.el" nil t t)
#+end_src

**** Xenops
Real time rendering of latex fragments.
     
#+begin_src emacs-lisp
  (use-package xenops
    :ensure t
    :hook
    (latex-mode . xenops-mode)
    (LaTeX-mode . xenops-mode))
#+end_src

*** Mu4e
Mail in emacs, synced with Mbsync

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/mu4e")

  (require 'mu4e)
  (require 'mu4e-contrib)

  (setq mu4e-trash-folder "/TRASH")
  (setq mu4e-sent-folder "/SENT")
  (setq mu4e-drafts-folder "/drafts")

  (setq mu4e-headers-results-limit 500)

  ;; tell message-mode how to send mail
  (setq message-send-mail-function 'smtpmail-send-it)
  ;; if our mail server lives at smtp.example.org; if you have a local
  ;; mail-server, simply use 'localhost' here.
  (setq smtpmail-smtp-server "smtp.gmail.com")
  (setq smtpmail-smtp-service 587)       
  (setq smtpmail-stream-type 'starttls)

  (setq mu4e-get-mail-command "mbsync -a")
#+end_src

*** Org mode
Org mode is great. It really is. I just wish it made loving it a little easier.
    
**** Org mode
EVERYTHING IN ORG MODE!!

#+begin_src emacs-lisp
  (use-package org
    :ensure org-superstar
    :hook
    (org-mode . org-cdlatex-mode)
    (org-mode . (lambda () (org-superstar-mode)))
    (org-mode . org-indent-mode)
    :init
    (setq org-highlight-latex-and-related '(native latex script))
    (setq org-export-backends '(ascii html icalendar latex odt org))
    :bind
    (:map org-mode-map
          ("C-c C-x C-e" . skye/org-mark-and-archive)
          ("C-c C-x <up>" . org-cycle-list-bullet)
          :map global-map
          ("C-c a" . org-agenda)
          ("C-c c" . org-capture))
    :config
    (require 'org-tempo)

    (setq org-directory "~/Documents/life/")

    (defun skye/org-get-path (stringname)
      "Use concat to generate full path."
      (concat (file-name-as-directory org-directory) stringname))

    (setq skye/Readme (skye/org-get-path "README.org"))
    (setq skye/Ideas (skye/org-get-path "Ideas.org"))
    (setq skye/School (skye/org-get-path "SchoolWork.org"))
    (setq skye/archive (skye/org-get-path "archive.org"))
    (setq skye/calendar-personal (skye/org-get-path "calendar-personal.org"))
    (setq skye/calendar-stony (skye/org-get-path "calendar-stony.org"))

    (setq org-agenda-files (list skye/Readme skye/Ideas skye/School))
    (setq org-archive-location (concat skye/archive "::* From %s"))

    (setq org-ellipsis " ▼")
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)

    (setq org-todo-keywords '((sequence "☛TODO(t)" "|" "⚑WAITING(w!)") (sequence "|" "❌CANCELED(c)" "|" "✔DONE(d)")))

    (setq org-enforce-todo-dependencies t)
    (setq org-enforce-todo-checkbox-dependencies t)

    (setq skye/bullets-list '("◉" "●" "○" "⊙"))

    (setq org-src-window-setup 'current-window)

    (defun skye/org-mark-and-archive ()
      "Mark the state of the current subtree as either DONE or CANCELLED and export to my archive.org file"
      (interactive)
      (ivy-read "Choose a final TODO state:" '("✔DONE" "❌CANCELED")
                :action '(1
                          ("o" org-todo "action 1")
                          ("j" org-todo "action 2")))
      (org-archive-subtree))

    (add-to-list 'org-modules 'org-habit)

    (setq org-habit-graph-column 80)
    (setq org-habit-show-habits-only-for-today t)
    (setq org-habit-show-all-today t)

    (setq org-default-notes-file skye/Readme)

    (setq org-capture-templates '(
                                  ("e" "Email to be dealt with. Action item" entry
                                   (file+headline skye/Readme "Emails to deal with")
                                   "* ☛TODO %:from %? \n %a \n SCHEDULED: %^t DEADLINE: %^t \n :PROPERTIES: \n CREATED: %u \n :END:"
                                   )

                                  ("m" "Miscellaneous TODO. Refile" entry
                                   (file+headline skye/Readme "Miscellaneous")
                                   "* ☛TODO %^{PROMPT} %? \n SCHEDULED: %^t DEADLINE: %^u"
                                   )

                                  ("t" "Date-less TODO. Generic" entry
                                   (file skye/Readme)
                                   "* ☛TODO %^{PROMPT} \n  %?"
                                   )
                                  ))

    (setq org-refile-targets
          '((nil :maxlevel . 3)
            (org-agenda-files :maxlevel . 2)))

    (setq org-pretty-entities nil)
    (setq org-preview-latex-default-process 'dvisvgm)
    )
#+end_src

**** Org-superstar
Fancy stars and hiding of ugly stars. Kinda like a better version of *org-bullets*
     
#+begin_src emacs-lisp
  (use-package org-superstar
    :ensure t
    :after
    (org)
    :config
    (setq org-superstar-leading-bullet ?\s)
    (setq org-superstar-cycle-headline-bullets t)
    (setq org-superstar-headline-bullets-list skye/bullets-list))
#+end_src

* Tweaks to emacs' appearance
This is a list of purely cosmetic changes to the way emacs naturally presents itself. Emacs seriously needs modernizing.

** Getting rid of random shit
I'm not a big fan of Tool/Menu bars, fringes, the startup message,the scroll bar and the default visual line mode. These get rid of that nonsense. Also, the newer tab bar more and tab list mode are not needed.
#+begin_src emacs-lisp
  (setq inhibit-startup-message t) ;startup.el
  (tool-bar-mode -1) ;tool-bar.el
  (menu-bar-mode -1) ;menu-bar.el
  (set-scroll-bar-mode nil) ;sroll-bar.el
  (global-visual-line-mode t) ;simple.el
  (set-fringe-mode 0) ;fringe.el
  (tab-bar-mode 0) ;tab-bar.el
  (global-tab-line-mode 0) ;tab-line.el
#+end_src

** Font and font size
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Inconsolata LGC Markup" :height 130)
#+end_src

** My own theme based on the colors of the Trans flag.
For the time being, its loaded from the themes directory, so the directory needs to be added to the theme-load-path.
#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  (load-theme 'TransSide t)
#+end_src
   
** Setting the default frame
After using transparency for a while and not having (fullscreen . maximized) working properly I've settled on just pushing the frame to the edges of the screen.
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . fullboth))
#+end_src

** Modeline shenanigans
*** Nano-modeline
Testing out nano-modeline.
    
#+begin_src emacs-lisp
  (use-package nano-modeline
    :ensure t
    :config
    (setq nano-modeline-position 'mode-line)
    (nano-modeline-mode))

#+end_src

* Tweaks to emacs' functioning
This is a list of non-cosmetic changes to the way emacs naturally functions. 

** Y/N instead of yes-or-no
It's low-key obnoxious to have to type out yes or no each time a prompt comes up.
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Better autosaving
Auto-saving for default emacs puts the auto saved files in the current working directory. I like having it in a seperate folder. This also maintains more new versions and fewer old versions from the point of file save. 
#+begin_src emacs-lisp
  (setq backup-by-copying t      ; don't clobber symlinks
        backup-directory-alist '(("." . "~/.emacs.d/saves/"))    ; don't litter my fs tree
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)       ; use versioned backups

  (setq auto-save-file-name-transforms
        `((".*" "~/.emacs.d/saves/" t)))
#+end_src

** Vertical splits as defualt
For reasons beyond my knowledge, emacs chooses to split new windows length-wise instead of breadth-wise. 

#+begin_src emacs-lisp
  (setq split-height-threshold nil) ;window.el
  (setq split-width-threshold 0) ;window.el
#+end_src

** Window Management
Emacs places windows way too inconsistently. This fixes that. Stoled from Protesilaos' config.

#+begin_src emacs-lisp
  (use-package window
    :init
    (setq display-buffer-alist
          '(;; top side window
            ("\\*\\(Flycheck\\|Flymake\\|Package-Lint\\|vc-git :\\).*" ;; This bit is useless to me currently. Rethink it later. 
             (display-buffer-in-side-window)
             (window-height . 0.25)
             (side . top)
             (slot . 0))
            ("\\*Messages.*"
             (display-buffer-in-side-window)
             (window-height . 0.25)
             (side . top)
             (slot . 1))
            ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\)\\*"
             (display-buffer-in-side-window)
             (window-height . 0.25)
             (side . top)
             (slot . 2))
            ;; bottom side window
            ("\\*\\(Output\\|Register Preview\\).*"
             (display-buffer-in-side-window)
             (window-width . 0.20)       ; See the :hook
             (side . bottom)
             (slot . -1))
            (".*\\*\\(Completions\\|Embark.*Occur\\).*"
             (display-buffer-in-side-window)
             (window-height . 0.25)
             (side . bottom)
             (slot . 0))
            ("^\\(\\*e?shell\\|vterm\\).*" ;; You don't use eshell. get rid of it
             (display-buffer-in-side-window)
             (window-width . 0.40)
             (side . right)
             (slot . 1))
            ;; left side window
            ("\\*Help.*"
             (display-buffer-in-side-window)
             (window-width . 0.25)       ; See the :hook
             (side . left)
             (slot . 0))
            ;; right side window
            ("\\*Faces\\*"
             (display-buffer-in-side-window)
             (window-width . 0.25)
             (side . right)
             (slot . 0)
             (window-parameters . ((mode-line-format . (" " mode-line-buffer-identification)))))
            ("\\*Custom.*"
             (display-buffer-in-side-window)
             (window-width . 0.25)
             (side . right)
             (slot . 1))
            ;; bottom buffer (NOT side window)
            ("\\*\\vc-\\(incoming\\|outgoing\\).*"
             (display-buffer-at-bottom))))
    (setq window-combination-resize t)
    (setq even-window-sizes 'height-only)
    (setq window-sides-vertical nil)
    ;; Note that the the syntax for `use-package' hooks is controlled by
    ;; the `use-package-hook-name-suffix' variable.  The "-hook" suffix is
    ;; not an error of mine.
    :hook ((help-mode . visual-line-mode)
           (custom-mode . visual-line-mode))
    :bind (("s-n" . next-buffer)
           ("s-p" . previous-buffer)
           ("s-o" . other-window)
           ("s-0" . delete-window)
           ("s-1" . delete-other-windows)
           ("s-5" . delete-frame)
           ("C-x +" . balance-windows-area)))
#+end_src

** Smoother scrolling
I've had some difficulty with getting the recommended "scroll- margin, step, conservatively etc" not working. Auto-window-vscroll does work.
#+begin_src emacs-lisp
  (setq auto-window-vscroll nil)
#+end_src

** Custom-set variables get their own file
I like a clean init.el. Custom-set variables getting thrown in init.el isn't my favourite thing. The solution is to put it in its own file lol. Laziness is always the best solution.
#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))

  (load-file custom-file)
#+end_src

** UTF-8 and Unicode stuff
Idk what UTF-8 is.
#+begin_src emacs-lisp
  (prefer-coding-system       'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

  (use-package unicode-fonts
    :ensure t
    :config
    (unicode-fonts-setup))
#+end_src

* Custom functions
This is a catch all place to dump custom functions. 

** Window splits. 
This is a function to toggle how the window is split

#+begin_src emacs-lisp
  (defun contrib/toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))
#+end_src

** Intelligent minibuffer quits
Quitting out of the minibuffer can be a bit finicky. This function forces focus to the minibuffer when it is "active". For the time being, I also remap C-g here. To be refiled.

#+begin_src emacs-lisp
  (defun contrib/keyboard-quit-context+ ()
    "Quit current context.

  This function is a combination of `keyboard-quit' and
  `keyboard-escape-quit' with some parts omitted and some custom
  behavior added."
    (interactive)
    (cond ((region-active-p)
           ;; Avoid adding the region to the window selection.
           (setq saved-region-selection nil)
           (let (select-active-regions)
             (deactivate-mark)))
          ((eq last-command 'mode-exited) nil)
          (current-prefix-arg
           nil)
          (defining-kbd-macro
            (message
             (substitute-command-keys
              "Quit is ignored during macro defintion, use \\[kmacro-end-macro] if you want to stop macro definition"))
            (cancel-kbd-macro-events))
          ((active-minibuffer-window)
           (when (get-buffer-window "*Completions*")
             ;; hide completions first so point stays in active window when
             ;; outside the minibuffer
             (minibuffer-hide-completions))
           (abort-recursive-edit))
          (t
           (when completion-in-region-mode
             (completion-in-region-mode -1))
           (let ((debug-on-quit nil))
             (signal 'quit nil)))))

  (global-set-key [remap keyboard-quit] #'contrib/keyboard-quit-context+)
#+end_src

** Inhibit linum mode
This function is to be used in conjunction with hooks for modes that don't need line numbers.
   
#+begin_src emacs-lisp
  (defun contrib/inhibit-global-linum-mode ()
    "Counter-act `global-linum-mode'."
    (add-hook 'after-change-major-mode-hook (lambda () (linum-mode 0)) :append :local))
#+end_src

** Kill current buffer 
A mini function that I use for my own quick quit for things like ibuffer etc.

#+begin_src emacs-lisp
  (defun skye/kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
#+end_src

** Buffer scale
Self explanatory, to change buffer text size.

#+begin_src emacs-lisp
  (defun skye/small-text-scale ()
    "Make the buffer text zoom smaller"
    (interactive)
    (text-scale-set -1))

  (defun skye/big-text-scale ()
    "Make the buffer text zoom bigger"
    (interactive)
    (text-scale-set 1))
#+end_src

** Kill window on quit buffer
Usefull for things like dired, ibuffer etc that don't kill the window on quitting.

#+begin_src emacs-lisp
  (defun skye/quit-window ()
    "If more than one window is open, close window on quit"
    (interactive)
    (if (> (length (window-list)) 1) (delete-window) (quit-window)))
#+end_src

** Reload theme

#+begin_src emacs-lisp
  (defun skye/reload-theme ()
    "Reload a theme by disabling that theme first"
    (interactive)
    (let ((theme 'TransSide))
    (eval-buffer (current-buffer))
    (disable-theme theme)
    (enable-theme theme)))
#+end_src

* Custom Keybinds
This is a list of custom keybinds that I couldn't fit in with the package declarations. Use "C-z" for all my custom keybinds and use "M-z" for functions that are related but broader/inverse in scope. Use the super key for things that are commonly associated with the "C-x C-" keybind.

The following functions are bound
  - remove redundant white space between text
  - evalueate top-level function instead of function at point (elisp/global)
  - a custom function to toggle window split from horizontal to vertical.
  - revert buffer 
  - comment and uncoment region.
  - Describe the face at point. Prefixed with Ctrl-z to distinguish between this and describe-function

#+begin_src emacs-lisp
  (use-package emacs
    :bind
    (:map global-map
          :prefix-map my-ctrl-z-prefix-map
          :prefix "C-z"
          ("C-<SPC>" . fixup-whitespace)
          ("C-e" . eval-defun)
          ("|" . contrib/toggle-window-split)
          (";" . comment-region)
          ("C-h f" . describe-face))

    (:map global-map
          :prefix-map my-meta-z-prefix-map
          :prefix "M-z"
          (";" . uncomment-region))

    (:map global-map
          ("<f5>" . revert-buffer)
          ([remap kill-buffer] . skye/kill-current-buffer)
          ("s-s" . save-buffer)
          ("<f4>" . skye/reload-theme)
          )
    ) 
#+end_src

* Lastly,
Things that are to be done at the end. This should only load if everything else doesn't fail. Should consider putting some of this in a different place.

#+begin_src emacs-lisp
  (put 'scroll-left 'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
#+end_src  

